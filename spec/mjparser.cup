package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.util.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.concepts.*;

parser code {:

	Logger log = Logger.getLogger (getClass());
	
	private Boolean syntaxErrorFound = false;
	
	private StringBuilder errorMessage = new StringBuilder ();
	
	private List<String> errorMessages = new ArrayList<String> ();
	private List<String> errorDetailedDescriptions = new ArrayList<String> ();

	public Boolean syntaxErrorFound () {
		return syntaxErrorFound;
	}
	
	public List<String> getErrorMessages () {
	
		return errorMessages;
		
	}
	
	public List<String> getErrorDetailedDescriptions () {
	
		return errorDetailedDescriptions;
		
	}
	
	public void detailedErrorDescription (String description) {
	
		errorDetailedDescriptions.add (description);
		
	}
   
    // redefined error methods
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        //report_error("Syntax Error", cur_token);
		syntaxErrorFound = true;
		StringBuilder msg = new StringBuilder("Syntax Error"); 
    	msg.append (" on line ").append(cur_token.left);
		msg.append (" and column ").append(cur_token.right);
		errorMessages.add (msg.toString ());
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal Syntax Error, parsing interrupted", cur_token);
    }

    public void report_error(String message, Object info) {
		syntaxErrorFound = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) 
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) {
		log.info (s.toString() + " " + s.value.toString() + " line: " + s.left + ", column: " + s.right);
	}
	return s;
	
:}

terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF, SWITCH, DO, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, CASE;
terminal ADD, SUB, MUL, DIV, MOD;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, GREATER_THAN_EQUALS, LESS_THAN, LESS_THAN_EQUALS;
terminal AND, OR;
terminal ASSIGN, INC, DEC;
terminal SEMICOLON, COMMA, PERIOD;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal QUESTION_MARK, COLON;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;

non terminal Program;
non terminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
non terminal GlobalDeclarationsList, GlobalDeclaration;
non terminal GlobalMethodDeclarationsList, ClassMethodDeclarationsList;
non terminal ConstDecl, VarDecl, ClassDecl;
non terminal MultipleConstDecl, SingleConstDecl;
non terminal rs.etf.pp1.symboltable.concepts.Obj ConstValue;
non terminal MultipleVarDeclSyntaxCheck, MultipleVarDecl, SingleVarDecl, SingleVarDeclSyntaxCheck, ArrayVariableOption;
non terminal ExtendsOption, ExtendsSyntaxCheck, FieldsDeclarationsList, ClassMethodDeclarationsOption, ClassMethodLeftBrace;
non terminal rs.etf.pp1.symboltable.concepts.Obj ClassName;
non terminal FieldDecl, MultipleFieldDeclSyntaxCheck, MultipleFieldDecl, SingleFieldDecl, SingleFieldDeclSyntaxCheck;
non terminal MethodDecl, FormParsOption, MethodRightParenthesis, LocalVarDeclarationsList, StatementList;
non terminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
non terminal rs.etf.pp1.symboltable.concepts.Struct ReturnType;
non terminal FormPars, SingleFormParSyntaxCheck, SingleFormPar;
non terminal LocalVarDecl, MultipleLocalVarDecl, SingleLocalVarDecl;
non terminal rs.etf.pp1.symboltable.concepts.Struct Type;
non terminal Statement, MatchedStatement, UnmatchedStatement, Switch, Do, While;
non terminal CaseStatementList, CaseStatement, ReturnExprOption, PrintOption;
non terminal DesignatorStatement, ActParsOption;
non terminal rs.etf.pp1.symboltable.concepts.Struct Source;
non terminal ActPars, SingleActPar;
non terminal rs.etf.pp1.symboltable.concepts.Struct Condition, IfStatementSyntaxCheck, StatementCondition, CondTerm, CondFact;
non terminal And, Or, If, Else, LeftParenthesis, LeftBracket;
non terminal rs.etf.pp1.symboltable.concepts.Struct Expr, FirstExpr, SecondExpr, FirstCondExpr, SecondCondExpr, NonCondExpr, CondExpr;
non terminal rs.etf.pp1.symboltable.concepts.Struct Term;
non terminal rs.etf.pp1.symboltable.concepts.Struct Factor;
non terminal rs.etf.pp1.symboltable.concepts.Obj Designator, MethodDesignator;
non terminal Assignop;
non terminal Relop;
non terminal Addop;
non terminal Mulop;

Program ::= (Program) PROGRAM ProgramName GlobalDeclarationsList LEFT_BRACE GlobalMethodDeclarationsList RIGHT_BRACE ;

ProgramName ::= (ProgramName) IDENT:programName ;

GlobalDeclarationsList ::= (GlobalDeclarations) GlobalDeclarationsList GlobalDeclaration
                           |
						   (NoGlobalDeclarations) /* epsilon */ ;
						   
GlobalMethodDeclarationsList ::= (GlobalMethodDeclarations) GlobalMethodDeclarationsList MethodDecl
                                 |
								 (NoGlobalMethodDeclarations) /* epsilon */ ;
								 
GlobalDeclaration ::= (ConstDeclaration) ConstDecl
                      |
					  (VarDeclaration) VarDecl
					  |
					  (ClassDeclaration) ClassDecl ;
					  
ConstDecl ::= (ConstDecl) CONST Type MultipleConstDecl SEMICOLON ;

MultipleConstDecl ::= (MultipleConstDeclaration) MultipleConstDecl COMMA SingleConstDecl
                      |
					  (SingleConstDeclaration) SingleConstDecl ;
					  
SingleConstDecl ::= (SingleConstDecl) IDENT:constName ASSIGN ConstValue ;

ConstValue ::= (NumberConst) NUMBER:numberConst
               |
			   (CharConst) CHAR:charConst
			   |
			   (BoolConst) BOOL:boolConst ;
			   
VarDecl ::= (VarDecl) MultipleVarDeclSyntaxCheck SEMICOLON ;

MultipleVarDeclSyntaxCheck ::= (MultipleVarDeclSuccess) Type MultipleVarDecl
                               |
							   (MultipleVarDeclError) error:e
							   {: parser.detailedErrorDescription ("error in global variable declaration"); :} ;

MultipleVarDecl ::= (MultipleVarDeclaration) MultipleVarDecl COMMA SingleVarDeclSyntaxCheck
                    |
					(SingleVarDeclaration) SingleVarDeclSyntaxCheck ;
					
SingleVarDeclSyntaxCheck ::= (SingleVarDeclSuccess) SingleVarDecl
                             |
							 (SingleVarDeclError) error:e
							 {: parser.detailedErrorDescription ("error in global variable declaration"); :} ;
					
SingleVarDecl ::= (SingleVarDecl) IDENT:varName ArrayVariableOption ;

ArrayVariableOption ::= (ArrayVariable) LEFT_BRACKET RIGHT_BRACKET
                        |
						(NoArrayVariable) /* epsilon */ ;
						
ClassDecl ::= (ClassDecl) CLASS ClassName LEFT_BRACE FieldsDeclarationsList ClassMethodDeclarationsOption RIGHT_BRACE ;

ClassName ::= (ClassName) IDENT:className ExtendsOption ;

ExtendsOption ::= (ClassInheritance) ExtendsSyntaxCheck
                  |
				  (NoClassInheritance) /* epsilon */ ;
				  
ExtendsSyntaxCheck ::= (InheritanceSuccess) EXTENDS Type:superClassName
                       |
					   (InheritanceError) error:e
					   {: parser.detailedErrorDescription ("error in class inheritance"); :} ;
				  
FieldsDeclarationsList ::= (FieldsDeclarations) FieldsDeclarationsList FieldDecl 
                           |
						   (NoFieldsDeclarations) /* epsilon */ ;
						   
FieldDecl ::= (FieldDecl) MultipleFieldDeclSyntaxCheck SEMICOLON ;

MultipleFieldDeclSyntaxCheck ::= (MultipleFieldDeclSuccess) Type MultipleFieldDecl
                                 |
								 (MultipleFieldDeclError) error:e
								 {: parser.detailedErrorDescription ("error in class field declaration"); :} ;
						   
MultipleFieldDecl ::= (MultipleFieldDeclaration) MultipleFieldDecl COMMA SingleFieldDeclSyntaxCheck
                      |
					  (SingleFieldDeclaration) SingleFieldDeclSyntaxCheck ;
					  
SingleFieldDeclSyntaxCheck ::= (SingleFieldDeclSuccess) SingleFieldDecl
                               |
							   (SingleFieldDeclError) error:e
							   {: parser.detailedErrorDescription ("error in class field declaration"); :} ;
			  
SingleFieldDecl ::= (SingleFieldDecl) IDENT:fieldName ArrayVariableOption ;

ClassMethodDeclarationsOption ::= (ClassMethods) ClassMethodLeftBrace ClassMethodDeclarationsList RIGHT_BRACE
                                  |
								  (NoClassMethods) /* epsilon */ ;
								  
ClassMethodLeftBrace ::= (ClassMethodLeftBrace) LEFT_BRACE ;
								  
ClassMethodDeclarationsList ::= (ClassMethodDeclarations) ClassMethodDeclarationsList MethodDecl
                                |
								(NoClassMethodDeclarations) /* epsilon */ ;
								
MethodDecl ::= (MethodDecl) MethodName LEFT_PARENTHESIS FormParsOption MethodRightParenthesis LocalVarDeclarationsList LEFT_BRACE StatementList RIGHT_BRACE ;

MethodName ::= (MethodName) ReturnType IDENT:methodName ;

ReturnType ::= (NoVoidReturn) Type:returnType
               |
			   (VoidReturn) VOID ;
			   
FormParsOption ::= (FormalParameters) FormPars
                   |
				   (NoFormalParameters) /* epsilon */ ;
				   
FormPars ::= (MultipleFormalParameters) FormPars COMMA SingleFormParSyntaxCheck
             |
			 (SingleFormalParameter) SingleFormParSyntaxCheck ;
			 
SingleFormParSyntaxCheck ::= (SingleFormParSuccess) SingleFormPar
                             |
							 (SingleFormParError) error:e
							 {: parser.detailedErrorDescription ("error in formal parameter declaration"); :} ;
			 
SingleFormPar ::= (SingleFormPar) Type IDENT:formParName ArrayVariableOption ;

MethodRightParenthesis ::= (MethodRightParenthesis) RIGHT_PARENTHESIS ;

LocalVarDeclarationsList ::= (LocalVarDeclarations) LocalVarDeclarationsList LocalVarDecl
                             |
							 (NoLocalVarDeclarations) /* epsilon */ ;
							 
LocalVarDecl ::= (LocalVarDecl) Type MultipleLocalVarDecl SEMICOLON ;

MultipleLocalVarDecl ::= (MultipleLocalVarDeclaration) MultipleLocalVarDecl COMMA SingleLocalVarDecl
                         |
						 (SingleLocalVarDeclaration) SingleLocalVarDecl ;
						 
SingleLocalVarDecl ::= (SingleLocalVarDecl) IDENT:localVarName ArrayVariableOption ;

Type ::= (Type) IDENT:typeName ;

StatementList ::= (Statemenets) StatementList Statement
                  |
				  (NoStatements) /* epsilon */ ;
				  
Statement ::= (MatchedStmt) MatchedStatement
              |
			  (UnmatchedStmt) UnmatchedStatement ;
			  
MatchedStatement ::= (MatchedDesignatorStatement) DesignatorStatement SEMICOLON
                     |
					 (MatchedIfStatement) If LEFT_PARENTHESIS IfStatementSyntaxCheck RIGHT_PARENTHESIS MatchedStatement Else MatchedStatement
					 |
					 (MatchedWhileStatement) Do MatchedStatement While LEFT_PARENTHESIS StatementCondition RIGHT_PARENTHESIS SEMICOLON
					 |
					 (MatchedSwitchStatement) Switch LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS LEFT_BRACE CaseStatementList RIGHT_BRACE
					 |
					 (BreakStatement) BREAK SEMICOLON
					 |
					 (ContinueStatement) CONTINUE SEMICOLON
					 |
					 (ReturnStatement) RETURN ReturnExprOption SEMICOLON
					 |
					 (ReadStatement) READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
					 |
					 (PrintStatement) PRINT LEFT_PARENTHESIS Expr PrintOption RIGHT_PARENTHESIS SEMICOLON
					 |
					 (StatementBlock) LEFT_BRACE StatementList RIGHT_BRACE ;
					 
UnmatchedStatement ::= (UnmatchedIfStatement) If LEFT_PARENTHESIS IfStatementSyntaxCheck RIGHT_PARENTHESIS Statement
                       |
					   (UnmatchedElseStatement) If LEFT_PARENTHESIS IfStatementSyntaxCheck RIGHT_PARENTHESIS MatchedStatement Else UnmatchedStatement
					   |
					   (UnmatchedWhileStatement) Do UnmatchedStatement While LEFT_PARENTHESIS StatementCondition RIGHT_PARENTHESIS SEMICOLON ;
					   
If ::= (IfStart) IF ;

Else ::= (ElseStart) ELSE ;
					   
Do ::= (DoWhileStart) DO ;

While ::= (WhileConditionStart) WHILE ;

Switch ::= (SwitchStart) SWITCH ;
					   
CaseStatementList ::= (CaseStatements) CaseStatementList CaseStatement
                      |
					  (NoCaseStatements) /* epsilon */ ;
					  
CaseStatement ::= (CaseStatement) CASE NUMBER COLON StatementList ;

ReturnExprOption ::= (ReturnExpr) Expr
                     |
					 (NoReturnExpr) /* epsilon */ ;
					 
PrintOption ::= (PrintArgument) COMMA NUMBER
                |
				(NoPrintArgument) /* epsilon */ ;
				
DesignatorStatement ::= (AssignStatement) Designator Assignop Source
                        |
						(MethodCallStatement) MethodDesignator LEFT_PARENTHESIS ActParsOption RIGHT_PARENTHESIS
						|
						(IncrementStatement) Designator INC
						|
						(DecrementStatement) Designator DEC
						|
						(AssignStatementError) error:e
						{: parser.detailedErrorDescription ("error in designator statement"); :} ;
						
Source ::= (AssignSuccess) Expr
           |
		   (AssignError) error:e
		   {: parser.detailedErrorDescription ("error in assign statement"); :} ;
						
ActParsOption ::= (ActualParameters) ActPars
                  |
				  (NoActualParameters) /* epsilon */ ;
				  
ActPars ::= (MultipleActualParameters) ActPars COMMA SingleActPar
            |
			(SingleActualParameter) SingleActPar ;
			
SingleActPar ::= (SingleActPar) Expr ;

IfStatementSyntaxCheck ::= (IfStatementSuccess) StatementCondition
                           |
						   (IfStatementError) error:e
						   {: parser.detailedErrorDescription ("error in if statement condition"); :} ;

StatementCondition ::= (ConditionalOperator) CondExpr
                       |
					   (NoConditionalOperator) Condition ;

Condition ::= (MultipleTermCondition) Condition Or CondTerm
              |
			  (SingleTermCondition) CondTerm ;
			  
CondTerm ::= (MultipleFactTerm) CondTerm And CondFact
             |
			 (SingleFactTerm) CondFact ;
			 
Or ::= (Or) OR ;

And ::= (And) AND ;
			 
CondFact ::= (MultipleExprFactor) FirstExpr Relop SecondExpr
             |
			 (SingleExprFactor) NonCondExpr ;
			 
FirstCondExpr ::= (FirstCondExpr) Expr;

SecondCondExpr ::= (SecondCondExpr) Expr;
			 
FirstExpr ::= (FirstExpr) NonCondExpr ;

SecondExpr ::= (SecondExpr) NonCondExpr ;

Expr ::= (ConditionalOperatorExpr) CondExpr
         |
		 (NoConditionalOperatorExpr) NonCondExpr ;
		 
CondExpr ::= (CondExpr) Condition QUESTION_MARK FirstCondExpr COLON SecondCondExpr;

NonCondExpr ::= (MultipleTermExpr) NonCondExpr Addop Term
                |
				(SingleTermExpr) Term
				|
				(MinusTermExpr) SUB Term ;
				
Term ::= (MultipleFactorTerm) Term Mulop Factor
         |
		 (SingleFactorTerm) Factor ;
		 
Factor ::= (FactorDesignator) Designator
           |
		   (MethodCallFactor) MethodDesignator LeftParenthesis ActParsOption RIGHT_PARENTHESIS
		   |
		   (ConstFactor) ConstValue
		   |
		   (NewObjectFactor) NEW Type
		   |
		   (NewArrayFactorNonCondExpr) NEW Type LeftBracket NonCondExpr RIGHT_BRACKET
		   |
		   (NewArrayFactorCondExpr) NEW Type LeftBracket CondExpr RIGHT_BRACKET
		   |
		   (CompositeFactorNonCondExpr) LeftParenthesis NonCondExpr RIGHT_PARENTHESIS
		   |
		   (CompositeFactorCondExpr) LeftParenthesis CondExpr RIGHT_PARENTHESIS;
		   
MethodDesignator ::= (MethodDesignator) Designator ;
		   
Designator ::= (SimpleDesignator) IDENT:designatorName
               |
			   (ClassDesignator) Designator PERIOD IDENT:fieldOrMethodName
			   |
			   (ArrayDesignatorNonCondExpr) Designator LeftBracket NonCondExpr RIGHT_BRACKET
			   |
			   (ArrayDesignatorCondExpr) Designator LeftBracket CondExpr RIGHT_BRACKET;
			   
LeftParenthesis ::= (LeftParenthesis) LEFT_PARENTHESIS;

LeftBracket ::= (LeftBracket) LEFT_BRACKET;
			   
Assignop ::= (Assign) ASSIGN ;

Relop ::= (Equals) EQUALS
          |
		  (NotEquals) NOT_EQUALS
		  |
		  (GreaterThan) GREATER_THAN
		  |
		  (GreaterThanEquals) GREATER_THAN_EQUALS
		  |
		  (LessThan) LESS_THAN
		  |
		  (LessThanEquals) LESS_THAN_EQUALS ;
		  
Addop ::= (Add) ADD
          |
		  (Sub) SUB ;
		  
Mulop ::= (Mul) MUL
          |
		  (Div) DIV
		  |
		  (Mod) MOD ;